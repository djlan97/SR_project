# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msg/custom.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class custom(genpy.Message):
  _md5sum = "1a0f9ebf965faa62489c7c7a11fc5994"
  _type = "custom_msg/custom"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 x1
float32 y1
float32 a1
int8 c1
float32 x2
float32 y2
float32 a2
int8 c2
float32 x3
float32 y3
float32 a3
int8 c3
float32 x4
float32 y4
float32 a4
int8 c4"""
  __slots__ = ['x1','y1','a1','c1','x2','y2','a2','c2','x3','y3','a3','c3','x4','y4','a4','c4']
  _slot_types = ['float32','float32','float32','int8','float32','float32','float32','int8','float32','float32','float32','int8','float32','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x1,y1,a1,c1,x2,y2,a2,c2,x3,y3,a3,c3,x4,y4,a4,c4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(custom, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x1 is None:
        self.x1 = 0.
      if self.y1 is None:
        self.y1 = 0.
      if self.a1 is None:
        self.a1 = 0.
      if self.c1 is None:
        self.c1 = 0
      if self.x2 is None:
        self.x2 = 0.
      if self.y2 is None:
        self.y2 = 0.
      if self.a2 is None:
        self.a2 = 0.
      if self.c2 is None:
        self.c2 = 0
      if self.x3 is None:
        self.x3 = 0.
      if self.y3 is None:
        self.y3 = 0.
      if self.a3 is None:
        self.a3 = 0.
      if self.c3 is None:
        self.c3 = 0
      if self.x4 is None:
        self.x4 = 0.
      if self.y4 is None:
        self.y4 = 0.
      if self.a4 is None:
        self.a4 = 0.
      if self.c4 is None:
        self.c4 = 0
    else:
      self.x1 = 0.
      self.y1 = 0.
      self.a1 = 0.
      self.c1 = 0
      self.x2 = 0.
      self.y2 = 0.
      self.a2 = 0.
      self.c2 = 0
      self.x3 = 0.
      self.y3 = 0.
      self.a3 = 0.
      self.c3 = 0
      self.x4 = 0.
      self.y4 = 0.
      self.a4 = 0.
      self.c4 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3fb3fb3fb3fb().pack(_x.x1, _x.y1, _x.a1, _x.c1, _x.x2, _x.y2, _x.a2, _x.c2, _x.x3, _x.y3, _x.a3, _x.c3, _x.x4, _x.y4, _x.a4, _x.c4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.x1, _x.y1, _x.a1, _x.c1, _x.x2, _x.y2, _x.a2, _x.c2, _x.x3, _x.y3, _x.a3, _x.c3, _x.x4, _x.y4, _x.a4, _x.c4,) = _get_struct_3fb3fb3fb3fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3fb3fb3fb3fb().pack(_x.x1, _x.y1, _x.a1, _x.c1, _x.x2, _x.y2, _x.a2, _x.c2, _x.x3, _x.y3, _x.a3, _x.c3, _x.x4, _x.y4, _x.a4, _x.c4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.x1, _x.y1, _x.a1, _x.c1, _x.x2, _x.y2, _x.a2, _x.c2, _x.x3, _x.y3, _x.a3, _x.c3, _x.x4, _x.y4, _x.a4, _x.c4,) = _get_struct_3fb3fb3fb3fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fb3fb3fb3fb = None
def _get_struct_3fb3fb3fb3fb():
    global _struct_3fb3fb3fb3fb
    if _struct_3fb3fb3fb3fb is None:
        _struct_3fb3fb3fb3fb = struct.Struct("<3fb3fb3fb3fb")
    return _struct_3fb3fb3fb3fb
